<!DOCTYPE HTML>
<html>
<head>
  <title>Web Audio Spectrum Analyzer</title>
  <script src="js/support/jquery-1.6.2.min.js"></script>
  <script src="js/spectrum.js"></script>
  <script src="js/remoteaudioplayer.js"></script>
  <script src="js/recorder.js"></script>
  <script src="js/brain-0.6.0.js"></script>

  <link type="text/css" href="css/style.css" rel="Stylesheet" />

  <link href='http://fonts.googleapis.com/css?family=Aldrich|Marvel'
        rel='stylesheet' type='text/css'>
<script>
var context;

var frequencybox;
var wavebox;
var audio;
var mediaStreamSource;
var recorder;
var instances = new Array();
var net;

function initialize() {
  context = new webkitAudioContext();

  // Setup frequency domain graph
  frequencybox = new SpectrumBox(2048, 30, "fftbox", context);
  frequencybox.setValidPoints(500);
  frequencybox.getCanvasContext().fillStyle = "rgb(150, 150, 150)";

  // Setup time domain graph
  wavebox = new SpectrumBox(2048, 1000, "wavebox", context);
  wavebox.setType(SpectrumBox.Types.TIME);
  wavebox.getCanvasContext().fillStyle = "rgb(0, 0, 0)";

  // Load MP3
  audio = new RemoteAudioPlayer(context, "audio/track.mp3");
  audio.load(function() {
    //$('#play').text("Play");
    //$('#play').click(play);
  });

  //create the NN
  net = new brain.NeuralNetwork();
}

function play() {

  var source = mediaStreamSource || audio.getSource();
  if(mediaStreamSource){
	  var wavenode = wavebox.getAudioNode();
	  var frequencynode = frequencybox.getAudioNode();

	  // Route audio and graphs
	  source.connect(frequencynode);
	  frequencynode.connect(wavenode)
	  wavenode.connect(context.destination);
	  
	  recorder = new Recorder(mediaStreamSource);
	  recorder && recorder.record();

	  // Play audio
	  if(mediaStreamSource==undefined){
		audio.reload();
		source.noteOn(0);
	  }
	  // Enable graphs
	  wavebox.enable();
	  frequencybox.enable();

	  $('#train').text("Stop");
	  $('#train').click(stop);
  }
  else{
	alert("Please Connect the Microphone!");
  }
}

function stop() {
  // Disable graphs
  wavebox.disable();
  frequencybox.disable();
  audio.getSource().disconnect();
  
    createDownloadLink();
    recorder.clear();

  $('#train').text("Train");
  $('#train').click(play);
}

function test() {

  //train the net before
  net.train(instances);

  var source = mediaStreamSource || audio.getSource();
  if(mediaStreamSource){
	  var wavenode = wavebox.getAudioNode();
	  var frequencynode = frequencybox.getAudioNode();

	  // Route audio and graphs
	  source.connect(frequencynode);
	  frequencynode.connect(wavenode)
	  wavenode.connect(context.destination);
	  
	  recorder = new Recorder(mediaStreamSource);
	  recorder && recorder.record();

	  // Play audio
	  if(mediaStreamSource==undefined){
		audio.reload();
		source.noteOn(0);
	  }
	  // Enable graphs
	  wavebox.enable();
	  frequencybox.enable();

	  $('#test').text("Stop");
	  $('#test').click(stopTest);
  }
  else{
	alert("Please Connect the Microphone!");
  }
}

function stopTest() {
	// Disable graphs
	wavebox.disable();
	frequencybox.disable();
	audio.getSource().disconnect();

	$('#test').text("Test");
	$('#test').click(test);
	var testInstance = new Object();
	var normalized_sample = normalize(frequencybox.getSamples(), getMax(frequencybox.getSamples()));

	alert(JSON.stringify(net.run(normalized_sample[0])));
}

function iCanHazUserMedia(stream) {
    mediaStreamSource = context.createMediaStreamSource( stream );
}

function useMicrophoneAsInput(){
    try {
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      navigator.getUserMedia({audio:true},iCanHazUserMedia);
    } catch (e) {
      alert('No web audio support in this browser');
    }
}

function acceptData(){
	var result = prompt("Insert the related output");
	//normalize data
	var normalized_sample = normalize(frequencybox.getSamples(), getMax(frequencybox.getSamples()));
	for(i=instances.length; i<normalized_sample.length; i++){
		instances[i] = new Object();
		instances[i]['input'] = normalized_sample[i];
		switch(result)
			{
			case 'A':
			  instances[i]['output']= {A : 1};
			  break;
			case 'E':
			  instances[i]['output']= {E : 1};
			  break;
			}
	}
}

function normalize(matrix, max){
	var normalized = new Array();
	for(i=0; i<matrix.length; i++){
	  normalized[i] = new Array(matrix[i].length);
	  for(j=0; j<matrix[i].length; j++){
		normalized[i][j] = matrix[i][j]/max;
	  }
	}

	return normalized;
}

function getMax(matrix){
	var max = matrix[0][0];
	for(i=0; i<matrix.length; i++){
	  for(j=0; j<matrix[i].length; j++){
		if(matrix[i][j]>max) max = matrix[i][j]
	  }
	}
	
	return max;
}

function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var ahf = document.createElement('a');
      var rhf = document.createElement('a');
      
      au.controls = true;
      au.src = url;
      ahf.href = "#";
      ahf.setAttribute("onclick","acceptData()");
      ahf.innerHTML = " Accept ";
      rhf.href = "#";
      rhf.innerHTML = " Reject ";
      li.appendChild(au);
      li.appendChild(ahf);
      li.appendChild(rhf);
      document.getElementById('recordinglist').appendChild(li);
    });
  }

$(function() { initialize(); });

</script>
</head>

<body>
  <center>
    <div id="wrapper">
    <h1 style="margin: 2px" >Vocals Reconignizer</h1>
    Credit: <a href="http://0xfe.blogspot.com">0xfe</a> - 
    Extends by: <a href="http://giacomolm.blogspot.com">@giacomolamo</a>
    <p/>
    <div class="boxes">
      <div id="canvasbox">
        <canvas id="fftbox" width=500 height=100></canvas>
        <canvas id="wavebox" width=500 height=100></canvas>
      </div>
    </div>
    <p/>
    <a href="#" id="play" onclick="useMicrophoneAsInput()">Microphone</a>
    <a href="#" id="train" onmousedown="play()" onmouseup="stop()">Train</a>
    <a href="#" id="test" onmousedown="test()" onmouseup="stopTest()">Test</a>
    <p/>
    <div>
	<ul id="recordinglist">
	</ul>
    </div>
    <p/>
    <b>Note</b>: This demo only works on new versions of Chrome and Safari.
    <p/>
  </div>
</body>
</html>
